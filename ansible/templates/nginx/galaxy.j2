map $http_upgrade $connection_upgrade {
	default upgrade;
	''      close;
}

upstream galaxy {
	{% for n in range(galaxy_systemd_gunicorns) %}
    	server unix:{{ galaxy_mutable_data_dir }}/{{ galaxy_systemd_gunicorn_socket_name }}_{{ n }}.sock;
	{% endfor %}
}

server {
	listen        *:443 ssl default_server;
	server_name   [::]:443 default_server;

	error_page 404 /404.html;
	error_page 502 /502.html;
	error_page 503 /503.html;
	error_page 504 /503.html;

    location /404.html {
		root /usr/share/nginx/html;
		internal;
	}
	location /502.html {
		root /usr/share/nginx/html;
		internal;
	}
	location /503.html {
		root /usr/share/nginx/html;
		internal;
	}
	location /504.html {
		root /usr/share/nginx/html;
		internal;
	}

    client_body_buffer_size 1024m;
	access_log  syslog:server=unix:/dev/log;
	error_log   syslog:server=unix:/dev/log;

	location / {
		# This is the backend to send the requests to.
		proxy_pass http://galaxy;
		proxy_set_header Host $http_host;
		proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
		proxy_set_header X-Forwarded-Proto $scheme;
		proxy_set_header Upgrade $http_upgrade;
	}

	location /static {
		alias {{ galaxy_server_dir }}/static;
		expires 24h;
	}

	location /static/welcome.html {
		alias {{ galaxy_subsite_dir }}/$host.html;
		expires 24h;
	}

	location ~ /static/dist/base.css {
        root {{ galaxy_subsite_dir }};
        # Fall back to base version if a per-host version can't be found.
        try_files /$host.css /{{ galaxy_subsite_base_domain }}.css =404;
    }

	location ~ ^/api/dataset_collections/([^/]+)/download/?$ {
		proxy_buffering off;
		proxy_pass http://galaxy;
		proxy_set_header Host $http_host;
		proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
		proxy_set_header X-Forwarded-Proto $scheme;
		proxy_set_header Upgrade $http_upgrade;
	}

	location /_x_accel_redirect {
		internal;
		alias /;
		add_header X-Frame-Options SAMEORIGIN;
		add_header X-Content-Type-Options nosniff;

		# CORS
		if ($http_origin ~ "^https?://(covid19map\.elixir-luxembourg\.org|www\.bx\.psu\.edu)$") {
			add_header Access-Control-Allow-Origin $http_origin;
			add_header Access-Control-Allow-Methods 'GET';
			add_header Access-Control-Expose-Headers 'Content-Length,Content-Range';
			add_header Access-Control-Allow-Headers 'DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range';
		}
	}

	location /_upload {
		upload_store {{ galaxy_config['galaxy']['nginx_upload_store'] }};
		upload_limit_rate 32k;
		upload_store_access user:rw group:rw all:rw;
		upload_pass_form_field "";
		upload_set_form_field "__${upload_field_name}__is_composite" "true";
		upload_set_form_field "__${upload_field_name}__keys" "name path";
		upload_set_form_field "${upload_field_name}_name" "$upload_file_name";
		upload_set_form_field "${upload_field_name}_path" "$upload_tmp_path";
		upload_pass_args on;
		upload_pass /_upload_done;
	}

	location /_upload_done {
		set $dst /api/tools;
		if ($args ~ nginx_redir=([^&]+)) {
				set $dst $1;
		}
		rewrite "" $dst;
	}

	location /_job_files {
		if ($request_method != POST) {
				rewrite "" /api/jobs/$arg_job_id/files last;
		}
		upload_store {{ galaxy_config['galaxy']['nginx_upload_job_files_store'] }};
                # the rate limit might be needed if we have many Pulsar jobs that are writing data back
		# we need to limit it because the disc IO can be too large, ideally this happens on a different node
                # upload_limit_rate 32k;
		upload_store_access user:rw group:rw all:rw;
		upload_pass_form_field "";
		upload_set_form_field "__${upload_field_name}_path" "$upload_tmp_path";
		upload_pass_args on;
		upload_pass /_upload_job_files_done;
	}

	location /_upload_job_files_done {
		internal;
		rewrite "" /api/jobs/$arg_job_id/files;
	}

	location /api/upload/resumable_upload {
		# Disable request and response buffering
		proxy_request_buffering  off;
		proxy_buffering          off;
		proxy_http_version       1.1;

		# Add X-Forwarded-* headers
		proxy_set_header X-Forwarded-Host $host;
		proxy_set_header X-Forwarded-Proto $scheme;

		proxy_set_header         Upgrade $http_upgrade;
		proxy_set_header         Connection "upgrade";
		client_max_body_size     0;
		proxy_pass http://uploadesginstance.esgwps.lol:1081/api/upload/resumable_upload;
	}

	# serve visualization and interactive environment plugin static content
	location ~ ^/plugins/(?<plug_type>[^/]+?)/((?<vis_d>[^/_]*)_?)?(?<vis_name>[^/]*?)/static/(?<static_file>.*?)$ {
		alias {{ galaxy_config_dir }}/plugins/$plug_type/;
		try_files $vis_d/${vis_d}_${vis_name}/static/$static_file
		          $vis_d/static/$static_file =404;
	}

	location /robots.txt {
		alias {{ galaxy_server_dir }}/static/robots.txt;
	}

	location /favicon.ico {
		alias {{ galaxy_server_dir }}/static/favicon.ico;
	}

	location /flower {
		proxy_pass http://localhost:5555;
		proxy_set_header Host $host;
		proxy_redirect off;
		proxy_http_version 1.1;
		proxy_set_header Upgrade $http_upgrade;
		proxy_set_header Connection "upgrade";
	}

	location /external/phdcomics/ {
		proxy_pass http://phdcomics.com/;
		# The comics are extremely cacheable. No sense waiting for a server from USA to respond.
		proxy_cache           STATIC;
		proxy_cache_valid     200  10d;
		proxy_cache_use_stale error timeout invalid_header updating http_500 http_502 http_503 http_504;
	}

	location /about {
		return 301 https://galaxyproject.eu/about;
	}

	location /people {
		return 301 https://galaxyproject.eu/people;
	}

	location /terms {
		return 301 https://galaxyproject.eu/gdpr;
	}

	resolver 8.8.8.8 8.8.4.4 valid=300s;
	resolver_timeout 5s;
	add_header X-Content-Type-Options nosniff;
	add_header X-XSS-Protection "1; mode=block";
	add_header X-Robots-Tag none;

	client_max_body_size 1G; # aka max upload size, defaults to 1M

	# Test restricted download
	location /restricted {
		alias {{ galaxy_restricted_data_dir }};
		{% for ip in galaxy_restricted_data_allowed_ip %}
		allow {{ ip }};
		{% endfor %}
		deny all;
	}

	{% if tpv_metascheduler_api_nginx_conf %}
	location {{ tpv_metascheduler_api_proxy_config.location }} {
		rewrite  ^{{ tpv_metascheduler_api_proxy_config.location }}(.*)  /$1 break;
        proxy_pass {{ tpv_metascheduler_api_proxy_config.proxy_pass_protocol }}://{{ tpv_metascheduler_api_proxy_config.proxy_pass_host }}:{{ tpv_metascheduler_api_proxy_config.proxy_pass_port }};
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
	}

	location {{ tpv_metascheduler_api_proxy_config.location }}version {
		alias {{ tpv_metascheduler_api_dir }}/version;
		add_header Content-Type text/plain;
        }
	{% endif %}
}
